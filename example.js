

var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  remove: function() {
    this.props.removeComment(this.props.id);
  },
  
  render: function() {
     return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
        <button type="button" onClick={this.remove}>Remove</button>
        <hr/>
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var removeComment = this.props.onCommentRemove;
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} id={comment.id} key={comment.id} removeComment={removeComment}>
          {comment.text}
        </Comment>
      );
    });
    
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  
  getInitialState: function() {
    return {author: '', text: ''};
  },
  
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },

  render: function() {
    return (
        <form className="commentForm" onSubmit={this.handleSubmit}>
          <input type="text" placeholder="Your name" value={this.state.author} onChange={this.handleAuthorChange} />
          <input type="text" placeholder="Say something..." value={this.state.text} onChange={this.handleTextChange} />
          <input type="submit" value="Post" />
        </form>
    );
  }
});

var CommentBox = React.createClass({

  getComments: function() {
    $.ajax({
      url: config.getUri,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  handleCommentSubmit: function(comment) {
    
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    
    $.ajax({
      url: config.addUri,
      dataType: 'json',
      contentType: 'text/plain',
      type: 'POST',
      data: JSON.stringify(comment),
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  handleCommentRemove: function(commentId) {

    var comments = this.state.data.slice(0);

    var newComments = this.state.data.slice(0);

    for(var i = newComments.length - 1; i >= 0; i--) {
        if(newComments[i].id === commentId) {
          newComments.splice(i, 1);
        }
    }

    this.setState({data: newComments});
    
    $.ajax({
      url: config.removeUri,
      dataType: 'json',
      contentType: 'text/plain',
      type: 'POST',
      data: JSON.stringify({ id: commentId }),
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  getInitialState: function() {
    return {data: []};
  },
  
  componentDidMount: function() {
    this.getComments();
    setInterval(this.getComments, this.props.pollInterval);
  },
  
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} onCommentRemove={this.handleCommentRemove} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

ReactDOM.render(
  <CommentBox pollInterval={5000} />,
  document.getElementById('content')
);
